{"version":3,"sources":["global/style/themes.ts","state/utils.ts","state/commands/commands-state.provider.tsx","state/state.provider.tsx","state/site/site-state.provider.tsx","components/header/header.styles.ts","components/header/header.tsx","components/content-container/content-container.styles.ts","exceptions/http.exception.ts","hooks/http.hooks.ts","components/command-documentation/command-documentation.styles.tsx","components/code-viewer/code-viewer.styles.tsx","components/line-break/line-break.styles.ts","components/line-break/line-break.tsx","components/command-list/command-list.styles.tsx","components/command-usage/command-usage.styles.tsx","components/code-block/code-block.styles.ts","components/code-tip/code-tip.styles.ts","components/code-tip/code-tip.tsx","components/command-documentation/documentation-renderer.tsx","components/command-documentation/command-documentation.tsx","components/footer/footer.styles.ts","components/footer/footer.tsx","components/description/description.styles.tsx","components/download/download.styles.ts","components/download/download-button.tsx","App.styles.ts","components/git-object-selection/branch-input.tsx","components/git-object-selection/release-selector.styles.ts","components/git-object-selection/release-selector.tsx","components/git-object-selection/git-object-selection.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AppThemes","styled","baseStyled","isBrowser","window","getStateItem","key","state","localStorage","getItem","JSON","parse","LOCAL_STORAGE_KEY","storedState","commands","CommandsContext","createContext","selectCommand","CommandsStateProvider","props","useState","setState","update","updated","storeState","store","Provider","value","command","console","log","name","selectedCommand","children","StateProvider","setItem","stringify","setStateItem","initState","theme","Light","childCommand","undefined","version","versionDownload","hash","SiteContext","changeTheme","changeCommand","changeChildCommand","changeVersion","changeVersionDownload","changeVersionPassword","SiteStateProvider","passwordHash","useSite","useContext","HeaderStyles","Header","header","ContentContainerStyles","Container","section","HttpException","errors","join","Error","syncWithStorage","http","axios","create","httpsAgent","https","Agent","rejectUnauthorized","process","fetcher","url","payload","a","get","response","isOk","status","data","statusText","message","apiBaseUrl","useCachedRequest","useSWR","useVersions","Name","h1","Description","div","NoVersionTitle","Examples","ExampleTitle","ExampleContent","ExampleBold","strong","ExampleItalic","em","ExampleBulletPoint","ExampleBulletPointBlock","ExampleCodeLine","span","EmilyCommand","EmilyOutput","CommandDocumentationStyles","List","ul","Option","li","Argument","Window","code","Content","Circle","color","Line","CodeViewerStyles","items","map","x","i","terminalContent","length","uuidv4","LineBreakStyles","LineBreak1","LineBreak2","HR1","HR2","getSelectedChildCommandButtonColumn","site","Col","className","Button","onClick","variant","getSelectedCommandButtonColumn","size","getChildCommandButtonColumn","getCommandButtonColumn","getChildCommandButtons","selectedChildCommand","childCommandButtons","subCommands","push","subcommand","button","CommandListStyles","emilyCommand","commandButtons","getCommandButtons","Row","type","lg","offset","md","xs","Options","OptionTitle","OptionDefinitionFormatter","option","this","arg","argStr","variadic","required","args","getArg","withPrefixDash","slice","negated","flag","negatable","getLongForm","negatedName","getArgs","desc","description","CommandUsageStyles","optionRows","optionRowIdx","opts","formatter","optionRow","getLongFormWithOptions","getDescription","commandName","CodeBlockStyles","Block","pre","CodeTipStyles","Tip","CodeTip","Toast","closeButton","src","alt","Body","renderSections","content","rendered","isList","isString","renderedElement","renderString","docSection","renderLink","subElements","renderSection","result","wordList","split","latest","word","href","target","rel","v","String","Array","isArray","CommandDocumentation","useVersion","error","renderErrorContent","renderEmptyContent","findSelectedCommand","findSelectedChildCommand","commandToRender","getCommandName","getTerminalSections","getCommandDescription","getExampleSections","formatArgument","str","optional","formatArguments","values","withTerminalChar","childArgs","childOpts","descriptionItems","idx","descriptionLine","extra","documentationSection","renderingCommand","filter","sectionsToRender","includes","commandStr","emilyDefinition","CommandDefinitionWithDocumentation","showError","msg","toast","toastId","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","FooterStyles","Footer","footer","DescriptionStyles","DownloadStyles","Download","DownloadButton","getVersionNumber","AppStyles","branchState","password","BranchInput","renderDisabledInput","Form","Group","controlId","Control","onChange","e","placeholder","submitBranchInput","bcrypt","hashSync","disabled","ReleaseSelectorStyles","ReleaseSelector","renderEmptyDropdown","dropdownItems","getDropdownItems","Dropdown","id","Toggle","Menu","versions","item","Item","clickHandler","reverse","GitObjectSelectionDev","GitObjectSelection","App","newestOnTop","rtl","pauseOnFocusLoss","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4df7b3b.chunk.js","sourcesContent":["import baseStyled, { ThemedStyledInterface } from 'styled-components'\r\nimport { DefaultVariables, ThemeVariables } from './vars'\r\nimport { transparentize } from 'polished'\r\n\r\nexport type AppTheme = {\r\n  // General settings (heights, paddings, etc)\r\n  vars: ThemeVariables\r\n\r\n  // General colors\r\n  primary: string\r\n  primaryInverse: string\r\n  primaryVariant: string\r\n  onPrimary: string\r\n\r\n  secondary: string\r\n  secondaryVariant: string\r\n  onSecondary: string\r\n\r\n  accent: string\r\n  onAccent: string\r\n\r\n  code: string\r\n  codeBg: string\r\n\r\n  // Colors for buttons, alerts, etc.\r\n  success: string\r\n  onSuccess: string\r\n\r\n  info: string\r\n  onInfo: string\r\n\r\n  warning: string\r\n  onWarning: string\r\n\r\n  error: string\r\n  onError: string\r\n\r\n  default: string\r\n  onDefault: string\r\n\r\n  // Text\r\n  mute: (val: string) => string\r\n}\r\n\r\nexport const LightTheme: AppTheme = {\r\n  vars: DefaultVariables,\r\n\r\n  primary: 'white',\r\n  primaryInverse: '#262322',\r\n  primaryVariant: '#F4F4F4',\r\n  onPrimary: 'black',\r\n\r\n  secondary: '#CC2E70',\r\n  secondaryVariant: '#9C528B',\r\n  onSecondary: 'white',\r\n\r\n  accent: '#4ECDC4',\r\n  onAccent: 'white',\r\n\r\n  codeBg: '#F4F4F4',\r\n  code: 'black',\r\n\r\n  // Colors for buttons, alerts, etc.\r\n  success: '#29C940',\r\n  onSuccess: 'white',\r\n\r\n  info: '#11CDEF',\r\n  onInfo: 'white',\r\n\r\n  warning: '#FFBD2E',\r\n  onWarning: 'white',\r\n\r\n  error: '#FF5F57', // or #942911\r\n  onError: 'white',\r\n\r\n  default: 'black',\r\n  onDefault: 'white',\r\n\r\n  mute: (val: string) => transparentize(0.5, val),\r\n}\r\n\r\nexport const DarkTheme: AppTheme = {\r\n  vars: DefaultVariables,\r\n\r\n  primary: '#262322',\r\n  primaryInverse: 'white',\r\n  primaryVariant: '#1e1d1c',\r\n  onPrimary: 'white',\r\n\r\n  secondary: '#A40E4C',\r\n  secondaryVariant: '#461220',\r\n  onSecondary: 'white',\r\n\r\n  accent: '#4ECDC4',\r\n  onAccent: 'white',\r\n\r\n  codeBg: '#332f2e',\r\n  code: 'white',\r\n\r\n  // Colors for buttons, alerts, etc.\r\n  success: '#2DCE89',\r\n  onSuccess: 'white',\r\n\r\n  info: '#11CDEF',\r\n  onInfo: 'white',\r\n\r\n  warning: '#FB6340',\r\n  onWarning: 'white',\r\n\r\n  error: '#F5365C', // or #942911\r\n  onError: 'white',\r\n\r\n  default: 'black',\r\n  onDefault: 'white',\r\n\r\n  mute: (val: string) => transparentize(0.5, val),\r\n}\r\n\r\nexport const styled = baseStyled as ThemedStyledInterface<AppTheme>\r\n\r\nexport enum AppThemes {\r\n  Light,\r\n  Dark,\r\n}\r\n","// Next.js runs on both the browser and server, and we don't have localStorage on the server.\r\n// Use this variable to check if we have localStorage \r\nconst isBrowser = typeof window !== \"undefined\";\r\n\r\nexport const getStateItem = (key: string): any | undefined => {\r\n  if (!isBrowser) return {}\r\n  const state = localStorage.getItem(key)\r\n  if (state !== null) return JSON.parse(state)\r\n  return undefined\r\n}\r\n\r\nexport const setStateItem = (state: any, key: string): void => {\r\n  if (!isBrowser) return\r\n  localStorage.setItem(key, JSON.stringify(state))\r\n}\r\n","import { CommandDefinition } from 'cilly'\r\nimport { ReactNode, createContext, useState, useContext } from 'react'\r\nimport { storeState } from '../state.provider'\r\nimport { getStateItem } from '../utils'\r\n\r\nconst LOCAL_STORAGE_KEY = 'COMMANDS_STATE'\r\n\r\ntype CommandsState = {\r\n  commands: CommandDefinition[]\r\n  selectedCommand?: CommandDefinition\r\n}\r\n\r\nconst initState: CommandsState = {\r\n  commands: []\r\n}\r\n\r\ntype CommandsContextProps = {\r\n  state: CommandsState\r\n\r\n  selectCommand(command: CommandDefinition): void\r\n}\r\n\r\nconst storedState: CommandsState = getStateItem(LOCAL_STORAGE_KEY) ?? initState\r\n\r\n// The context defines the interface for this specific state.\r\n// Provide all the information and functions we want to read and alter the state here.\r\nconst CommandsContext = createContext<CommandsContextProps>({\r\n  state: storedState,\r\n\r\n  selectCommand: () => {  }\r\n})\r\n\r\n// Provide implementations for the provider interface here\r\nconst CommandsStateProvider = (props: { children: ReactNode }) => {\r\n  const [state, setState] = useState<CommandsState>(storedState)\r\n  const store = (state: CommandsState) => storeState(state, LOCAL_STORAGE_KEY)\r\n  const update = (updated: CommandsState) => {\r\n    setState(updated)\r\n    store(updated)\r\n  }\r\n\r\n  const selectCommand = (command: CommandDefinition) => {\r\n    console.log(`Selecting command ${command.name}`)\r\n    update({ ...state, selectedCommand: command })\r\n  }\r\n\r\n\r\n  return (\r\n    <CommandsContext.Provider\r\n      value={{\r\n        state: state,\r\n        selectCommand\r\n      }}>\r\n      {props.children}\r\n    </CommandsContext.Provider>\r\n  )\r\n}\r\n\r\nexport default CommandsStateProvider\r\nexport const useCommands = () => useContext(CommandsContext)\r\n","import React, { ReactNode } from 'react'\r\nimport { setStateItem } from './utils';\r\nimport SiteStateProvider from './site/site-state.provider'\r\nimport CommandsStateProvider from './commands/commands-state.provider';\r\n\r\n\r\ntype StateProviderProps = {\r\n  children: ReactNode\r\n}\r\n\r\nconst StateProvider = (props: StateProviderProps) => {\r\n  return (\r\n    <SiteStateProvider>\r\n      <CommandsStateProvider>\r\n        {props.children}\r\n      </CommandsStateProvider>\r\n    </SiteStateProvider>\r\n  )\r\n}\r\n\r\nexport default StateProvider\r\nexport const storeState = (state: any, key: string) => setStateItem(state, key)\r\n","import React, { ReactNode, createContext, useState, useContext } from 'react'\r\nimport { AppThemes } from '../../global/style/themes'\r\nimport { storeState } from '../state.provider'\r\nimport { getStateItem } from '../utils'\r\n\r\nconst LOCAL_STORAGE_KEY = 'SITE_STATE'\r\n\r\ntype SiteState = {\r\n  theme: AppThemes,\r\n  command: string,\r\n  childCommand?: string,\r\n  version: string,\r\n  versionDownload: string,\r\n  hash?: string\r\n}\r\n\r\nconst initState: SiteState = {\r\n  theme: AppThemes.Light,\r\n  command: 'telemetry',\r\n  childCommand: undefined,\r\n  version: 'Release-v1.1.1',\r\n  versionDownload: 'Release-v1.1.1',\r\n  hash: undefined\r\n}\r\n\r\nexport type SiteContextProps = {\r\n  state: SiteState\r\n\r\n  changeTheme: (theme: AppThemes) => void\r\n  changeCommand: (command: string) => void\r\n  changeChildCommand: (childCommand?: string) => void\r\n  changeVersion: (version: string) => void,\r\n  changeVersionDownload: (versionDownload: string) => void,\r\n  changeVersionPassword: (version: string, passwordHash: string) => void\r\n}\r\n\r\ntype SiteStateProviderProps = {\r\n  children: ReactNode\r\n}\r\n\r\nconst storedState: SiteState = getStateItem(LOCAL_STORAGE_KEY) ?? initState\r\n\r\n// The context defines the interface for this specific state.\r\n// Provide all the information and functions we want to read and alter the state here.\r\nconst SiteContext = createContext<SiteContextProps>({\r\n  state: storedState,\r\n\r\n  changeTheme: () => {},\r\n  changeCommand: () => {},\r\n  changeChildCommand: () => {},\r\n  changeVersion: () => {},\r\n  changeVersionDownload: () => {},\r\n  changeVersionPassword: () => {}\r\n})\r\n\r\n// Provide implementations for the provider interface here\r\nconst SiteStateProvider = (props: SiteStateProviderProps) => {\r\n  const [state, setState] = useState<SiteState>(storedState)\r\n  const store = (state: SiteState) => storeState(state, LOCAL_STORAGE_KEY)\r\n  const update = (updated: SiteState) => {\r\n    setState(updated)\r\n    store(updated)\r\n  }\r\n\r\n  const changeTheme = (theme: AppThemes) => {\r\n    console.log(`Changing theme to ${theme}`)\r\n    update({ ...state, theme: theme })\r\n  }\r\n\r\n  const changeCommand = (command: string) => {\r\n    console.log(`Changing command to ${command}`)\r\n    update({ ...state, command: command, childCommand: undefined })\r\n  }\r\n\r\n  const changeChildCommand = (childCommand?: string) => {\r\n    console.log(`Changing child command to ${childCommand}`)\r\n    update({ ...state, childCommand: childCommand})\r\n  }\r\n\r\n  const changeVersion = (version: string) => {\r\n    console.log(`Changing version to ${version}`)\r\n    update({ ...state, version: version})\r\n  }\r\n\r\n  const changeVersionDownload = (versionDownload: string) => {\r\n    console.log(`Changing version of a download button to ${versionDownload}`)\r\n    update({ ...state, versionDownload: versionDownload, version: versionDownload})\r\n  }\r\n\r\n  const changeVersionPassword = (version: string, passwordHash: string) => {\r\n    console.log(`Changing version to ${version} and a password.`)\r\n    update({ ...state, version: version, hash: passwordHash})\r\n  }\r\n\r\n  return (\r\n    <SiteContext.Provider\r\n      value={{\r\n        state: state,\r\n        changeTheme: changeTheme,\r\n        changeCommand: changeCommand,\r\n        changeChildCommand: changeChildCommand,\r\n        changeVersion: changeVersion,\r\n        changeVersionDownload: changeVersionDownload,\r\n        changeVersionPassword: changeVersionPassword\r\n      }}>\r\n      {props.children}\r\n    </SiteContext.Provider>\r\n  )\r\n}\r\n\r\nexport default SiteStateProvider\r\nexport const useSite = () => useContext(SiteContext)\r\n","import { styled } from \"../../global/style/themes\";\r\n\r\nconst Header = styled.header`\r\n  font-size: 3.5em;\r\n  font-weight: bold;\r\n  text-align: center;\r\n  padding-top: 50px;\r\n  color: white;\r\n`\r\n\r\nexport const HeaderStyles = {\r\n  Header\r\n}","import { HeaderStyles } from \"./header.styles\"\r\n\r\nexport const Header = () => {\r\n  return (\r\n  <HeaderStyles.Header>\r\n    <p>Emily CLI Documentation</p>\r\n  </HeaderStyles.Header>\r\n  )\r\n}","import { styled } from \"../../global/style/themes\";\r\n\r\nconst Container = styled.section`\r\n  padding: 2em;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n`\r\n\r\nexport const ContentContainerStyles = {\r\n  Container\r\n}","export class HttpException extends Error {\r\n  constructor(public errors: string[]) {\r\n    super(errors.join('\\n'))\r\n  }\r\n}","import https from 'https'\r\nimport axios from \"axios\";\r\nimport { syncWithStorage } from \"swr-sync-storage\";\r\nimport { HttpException } from '../exceptions/http.exception';\r\nimport useSWR from 'swr';\r\nimport { ArgumentDefinition, CommandDefinition, OptionDefinition } from 'cilly';\r\n\r\n// export type Commandextra = {\r\n//   type: string,\r\n//   content: string\r\n// }\r\n\r\nexport type CommandDefinitionWithDocumentation = {\r\n  name: string;\r\n  version?: string;\r\n  description?: string;\r\n  opts: OptionDefinition[];\r\n  args: ArgumentDefinition[];\r\n  subCommands: CommandDefinitionWithDocumentation[];\r\n  extra: any[]\r\n}\r\n\r\n\r\n// Sync useSWR() data with localStorage, ensuring that we can always show\r\n// data immediately (and offline) if it has been requested before\r\nsyncWithStorage(\"local\");\r\n\r\nconst http = axios.create({\r\n  httpsAgent: new https.Agent({ rejectUnauthorized: process.env.NODE_ENV !== 'development' })\r\n})\r\n\r\nconst fetcher = async (url: string, payload: string)  => {\r\n  try {\r\n    console.log(`fetching ${url}`)\r\n    const response = await http.get(url)\r\n    const isOk = (status: number) => status >= 200 && status < 300\r\n    if (response.data?.errors) throw new HttpException(response.data.errors)\r\n    if (!isOk(response.status)) throw new HttpException([response.statusText])\r\n    return response.data.data\r\n  } catch (err) {\r\n    // if (err.response?.data?.errors) throw new HttpException(err.response.data.errors)\r\n    throw new HttpException([(err as Error).message])\r\n  }\r\n}\r\n\r\n// const apiBaseUrl = process.env.NODE_ENV === 'development' ? \r\n//   'https://emily-services-dev.westeurope.cloudapp.azure.com/documentation/v1' : \r\n//   'https://emily-extra-service.com/v1'\r\n\r\nconst apiBaseUrl = 'https://emily-services-dev.westeurope.cloudapp.azure.com/documentation/v1'\r\n\r\nexport const useCachedRequest = <T>(url: string) => useSWR<T, HttpException>(url, fetcher)\r\nexport const useVersions = () => useCachedRequest<any>(`${apiBaseUrl}/versions`)\r\nexport const useVersion = (version: string, hash: string) => useCachedRequest<any>(`${apiBaseUrl}/versions/docs?object=${version}&p=${hash}`)","import { styled } from \"../../global/style/themes\";\r\n\r\nconst Container = styled.section`\r\n  padding: 1em 8em;\r\n  text-align: center;\r\n  margin-bottom: 50px;\r\n`\r\nconst Name = styled.h1`\r\n  font-size: 2.5em;\r\n  color: white;\r\n`\r\n\r\nconst Description = styled.div`\r\n  font-size: 1.5em;\r\n  padding-bottom: 80px;\r\n  color: white;\r\n`\r\n\r\nconst NoVersionTitle = styled.div` \r\n  font-size: 1.5em;\r\n  text-align: center;\r\n  color: white;\r\n  padding-top: 50px;\r\n  height: 500px;\r\n`\r\n\r\nconst Examples = styled.section`\r\n`\r\n\r\nconst ExampleTitle = styled.h1`\r\n  margin-top: 50px; \r\n  margin-bottom: 50px; \r\n  color: white\r\n`\r\nconst ExampleContent = styled.div`\r\n  color: white;\r\n  padding-bottom: 10px;\r\n`\r\n\r\nconst ExampleBold = styled.strong`\r\n  color: inherit;\r\n`\r\n\r\nconst ExampleItalic = styled.em`\r\n  color: inherit\r\n`\r\n\r\nconst ExampleBulletPoint = styled.div`\r\n  text-align: left;\r\n  margin-left: 30px;\r\n`\r\n\r\nconst ExampleBulletPointBlock = styled.div`;\r\n  margin-left: 5%;\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n  color: white;\r\n  border-left: 1px solid rgba(255,255,255,0.2);\r\n`\r\n\r\nconst ExampleCodeLine = styled.span`\r\n  color: #ff3385;\r\n  font-family: consolas;\r\n`\r\n\r\nconst EmilyCommand = styled.span`\r\n  color: #03fc0f;\r\n`\r\n\r\nconst EmilyOutput = styled.span`\r\n  color: #6bbfff;\r\n`\r\n\r\nconst List = styled.ul`\r\n  list-style: none;\r\n`\r\n\r\nconst Option = styled.li`\r\n\r\n`\r\n\r\nconst Argument = styled.li`\r\n\r\n`\r\n\r\nexport const CommandDocumentationStyles = {\r\n  Container,\r\n  Name,\r\n  Description,\r\n  List,\r\n  Option,\r\n  Argument,\r\n  NoVersionTitle,\r\n  Examples,\r\n  ExampleTitle,\r\n  ExampleContent,\r\n  ExampleBulletPoint,\r\n  ExampleBulletPointBlock,\r\n  ExampleBold,\r\n  ExampleItalic,\r\n  ExampleCodeLine,\r\n  EmilyCommand,\r\n  EmilyOutput\r\n}","import { ReactNode } from \"react\";\r\nimport { styled } from \"../../global/style/themes\";\r\nimport { v4 as uuidv4 } from \"uuid\"\r\nimport { CommandDocumentationStyles } from \"../command-documentation/command-documentation.styles\";\r\n\r\nconst Window = styled.code`\r\n  margin: 0 auto;\r\n  padding: 1em;\r\n  min-height: 300px;\r\n  min-width: 500px;\r\n\r\n  background-color: #0f001c;\r\n  color: white;\r\n\r\n  border-radius: 7px;\r\n  box-shadow: 0px 5px 30px -1px rgba(0,0,0,0.4);\r\n  margin-bottom: 30px;\r\n`\r\nconst Header = styled.header`\r\n  width: 100%;\r\n  height: 1em;\r\n  display: flex;\r\n`\r\n\r\nconst Content = styled.section`\r\n  width: 100%;\r\n  padding: 1em;\r\n  overflow-y: auto;\r\n`\r\n\r\nconst Circle = styled.div<{ color: string }>`\r\n  width: 10px;\r\n  height: 10px;\r\n  border-radius: 50%;\r\n  background-color: ${props =>\r\n    props.color === 'red' ? 'red' :\r\n      props.color === 'yellow' ? 'yellow' : 'green'\r\n  };\r\n  margin: 0 .2em;\r\n`\r\n\r\nconst Line = styled.div`\r\n  text-align: left;\r\n  font-size: 13px;\r\n`\r\n\r\nconst renderEmptyTerminalLine = () => {\r\n  return (\r\n    <Line key={uuidv4()}>\r\n      <CommandDocumentationStyles.ExampleCodeLine>\r\n        $ try later versions for examples\r\n      </CommandDocumentationStyles.ExampleCodeLine>\r\n    </Line>\r\n  )\r\n}\r\n\r\nconst CodeViewer = (props: { children: JSX.Element[] }) => {\r\n\r\n  const items = props.children.map((x, i) => {\r\n    return <Line key={i}>{x}</Line>\r\n  })\r\n\r\n  const terminalContent = items.length !== 0 ? items : [ renderEmptyTerminalLine() ]\r\n\r\n  return (\r\n    <Window>\r\n      <Header>\r\n        <Circle color='red' />\r\n        <Circle color='yellow' />\r\n        <Circle color='green' />\r\n      </Header>\r\n\r\n      <Content>\r\n        {terminalContent}\r\n      </Content>\r\n    </Window>\r\n  )\r\n}\r\n\r\nexport const CodeViewerStyles = {\r\n  CodeViewer\r\n}","import { styled } from \"../../global/style/themes\";\r\n\r\nconst LineBreak1 = styled.header`\r\n  color: white;\r\n`\r\n\r\nconst LineBreak2 = styled.header`\r\n  color: white;\r\n  width: 50%;\r\n  margin: auto;\r\n`\r\n\r\nexport const LineBreakStyles = {\r\n    LineBreak1,\r\n    LineBreak2\r\n}","import { LineBreakStyles } from \"./line-break.styles\"\r\n\r\nexport const HR1 = () => {\r\n    return (\r\n        <LineBreakStyles.LineBreak1>\r\n            <hr/>\r\n        </LineBreakStyles.LineBreak1>\r\n    )\r\n}\r\n\r\nexport const HR2 = () => {\r\n    return (\r\n        <LineBreakStyles.LineBreak2>\r\n        <hr/>\r\n        </LineBreakStyles.LineBreak2>\r\n    )\r\n}","import { styled } from \"../../global/style/themes\";\r\nimport { Button, Col, Row } from \"react-bootstrap\";\r\nimport { SiteContextProps, useSite } from \"../../state/site/site-state.provider\";\r\nimport { HR1 } from \"../line-break/line-break\";\r\nimport { CommandDefinition } from \"cilly\";\r\n\r\n\r\nconst getSelectedChildCommandButtonColumn = (childCommand: CommandDefinition, site: SiteContextProps): JSX.Element => {\r\n    return (\r\n        <Col className=\"mt-3 mb-3\" key={`col-${childCommand.name}`}>\r\n            <Button onClick={() => site.changeChildCommand(undefined)} key={childCommand.name} variant=\"success\">\r\n                {childCommand.name}\r\n            </Button>\r\n        </Col>\r\n    )\r\n}\r\n\r\nconst getSelectedCommandButtonColumn = (command: CommandDefinition, site: SiteContextProps): JSX.Element => {\r\n    return (\r\n        <Col className=\"mt-3\" key={`col-${command.name}`}>\r\n            <Button size=\"lg\" key={command.name} onClick={() => site.changeChildCommand(undefined)} variant=\"success\">\r\n                {command.name}\r\n            </Button>\r\n        </Col>\r\n    )\r\n}\r\n\r\nconst getChildCommandButtonColumn = (childCommand: CommandDefinition, site: SiteContextProps): JSX.Element => {\r\n    return (\r\n        <Col className=\"mt-3 mb-3\" key={`col-${childCommand.name}`}>\r\n            <Button onClick={() => site.changeChildCommand(childCommand.name)} key={childCommand.name} variant=\"warning\">\r\n                {childCommand.name}\r\n            </Button>\r\n        </Col>\r\n    )\r\n}\r\n\r\nconst getCommandButtonColumn = (command: CommandDefinition, site: SiteContextProps): JSX.Element => {\r\n    return (\r\n        <Col className=\"mt-3\" key={`col-${command.name}`}>\r\n            <Button size=\"lg\" key={command.name} onClick={() => site.changeCommand(command.name)} variant=\"warning\">\r\n                {command.name}\r\n            </Button>\r\n        </Col>\r\n    )\r\n}\r\n\r\nconst getChildCommandButtons = (command: CommandDefinition, selectedChildCommand: CommandDefinition | undefined, site: SiteContextProps): any[] => {\r\n    const childCommandButtons = []\r\n\r\n    if (command.subCommands.length > 0) childCommandButtons.push(<HR1 />)\r\n\r\n    for (const subcommand of command.subCommands) {\r\n        const selected = (selectedChildCommand && selectedChildCommand.name === subcommand.name)\r\n        const button = selected ? getSelectedChildCommandButtonColumn(subcommand, site)\r\n            : getChildCommandButtonColumn(subcommand, site)\r\n        childCommandButtons.push(button)\r\n    }\r\n    return childCommandButtons\r\n}\r\n\r\nconst getCommandButtons = (emilyCommand: CommandDefinition,\r\n    selectedCommand: CommandDefinition,\r\n    selectedChildCommand: CommandDefinition | undefined,\r\n    site: SiteContextProps)\r\n    : { commandButtons: JSX.Element[], childCommandButtons: JSX.Element[] } => {\r\n    let commandButtons = []\r\n    let childCommandButtons = []\r\n\r\n    for (const command of emilyCommand.subCommands) {\r\n        const selected: boolean = command.name === selectedCommand.name\r\n\r\n        if (selected) {\r\n            const button = getSelectedCommandButtonColumn(command, site)\r\n            childCommandButtons = getChildCommandButtons(command, selectedChildCommand, site)\r\n            commandButtons.push(button)\r\n            continue\r\n        }\r\n\r\n        const button = getCommandButtonColumn(command, site)\r\n        commandButtons.push(button)\r\n    }\r\n    return { commandButtons, childCommandButtons }\r\n}\r\n\r\nconst CommandList = (props: { selectedCommand: CommandDefinition, selectedChildCommand: CommandDefinition | undefined, emilyCommand: CommandDefinition }) => {\r\n    const site: SiteContextProps = useSite()\r\n    const { commandButtons, childCommandButtons } = getCommandButtons(props.emilyCommand, props.selectedCommand, props.selectedChildCommand, site)\r\n\r\n    return (\r\n        <Row className='mt-5'>\r\n\r\n            <style type=\"text/css\">\r\n                {`\r\n                .btn-success, .btn-success:hover, .btn-success:active, .btn-success:focus {\r\n                    background-color: white;\r\n                    border-radius: 30px;\r\n                    color: #7a0029;\r\n                    border: 1px solid #7a0029;\r\n                    box-shadow: none;\r\n                }\r\n\r\n                .btn-warning {\r\n                    background-color: #7a0029;\r\n                    border-radius: 30px;\r\n                    color: white;\r\n                    border: 1px solid white;\r\n                    box-shadow: none;\r\n                  }\r\n        \r\n                  .btn-warning:hover, .btn-warning:active, .btn-warning:focus{\r\n                    background-color: white;\r\n                    color: #7a0029;\r\n                    border: 1px solid #7a0029;\r\n                    box-shadow: none;\r\n                  }\r\n                `}\r\n            </style>\r\n            <Col lg={{ span: 10, offset: 1 }} md={{ span: 6, offset: 3 }} xs={{ span: 4, offset: 4 }}>\r\n                <Row className='mt-5 justify-content-md-center'>\r\n                    {commandButtons}\r\n                </Row>\r\n                <Row className='mt-5'>\r\n                    {childCommandButtons}\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport const CommandListStyles = {\r\n    CommandList\r\n}","import { ArgumentDefinition, OptionDefinition } from \"cilly\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Options = styled.section`\r\n    text-align: left;\r\n    color: white;\r\n`\r\n\r\nconst OptionTitle = styled.section`\r\n    text-align: left;\r\n    font-size: 1em;\r\n    font-weight: bold;\r\n    color: white;\r\n`\r\n\r\nclass OptionDefinitionFormatter {\r\n    option: OptionDefinition\r\n\r\n    constructor(option: OptionDefinition) {\r\n        this.option = option\r\n    }\r\n\r\n    public getArg(arg: ArgumentDefinition): string {\r\n        let argStr = ''\r\n        argStr += arg.variadic ? `...${arg.name}` : arg.name\r\n        argStr += arg.required ? '*' : ''\r\n        return argStr\r\n    }\r\n\r\n    public getArgs(): string {\r\n        const args: string[] = []\r\n        for (const arg of this.option.args) {\r\n            const argStr = this.getArg(arg)\r\n            args.push(argStr)\r\n        }\r\n        return args.length > 0 ? `<${args.join(', ')}>` : ''\r\n    }\r\n\r\n    public getShortForm(withPrefixDash: boolean = true): string {\r\n        return withPrefixDash ? this.option.name[0] : this.option.name[0].slice(1)\r\n    }\r\n\r\n    public getLongForm(withPrefixDash: boolean = true, negated: boolean = false): string {\r\n        const flag = withPrefixDash ? this.option.name[1] : this.option.name[1].slice(2)\r\n        if (!negated) return flag\r\n        if (!this.option.negatable) return ''\r\n        return `(--no-${this.getLongForm(false, false)})`\r\n    }\r\n\r\n    public getLongFormWithOptions() {\r\n        const name: string = this.getLongForm(true, false)\r\n        const negatedName: string = this.getLongForm(true, true)\r\n        const args: string = this.getArgs()\r\n        return `${name} ${negatedName} ${args}`\r\n    }\r\n\r\n    public getDescription(): string {\r\n        let desc = this.option.description\r\n        return desc ?? ''\r\n    }\r\n}\r\n\r\nconst CommandUsage = (props: { commandName: string, opts: OptionDefinition[] }) => {\r\n\r\n    const optionRows = []\r\n    let optionRowIdx = 0\r\n    for (const option of props.opts) {\r\n        const formatter: OptionDefinitionFormatter = new OptionDefinitionFormatter(option)\r\n        const optionRow = []\r\n        optionRow.push(<Col key={`${optionRowIdx}-short`} xs=\"1\"><Options>{option.name[0]}</Options></Col>)\r\n        optionRow.push(<Col key={`${optionRowIdx}-long`} xs=\"3\"><Options>{formatter.getLongFormWithOptions()}</Options></Col>)\r\n        optionRow.push(<Col key={`${optionRowIdx}-desc`} xs=\"8\"><Options>{formatter.getDescription()}</Options></Col>)\r\n        \r\n        optionRows.push(<Row key={optionRowIdx}>{optionRow}</Row>)\r\n        optionRowIdx++\r\n    }\r\n\r\n    return (\r\n        <Container className='mb-5'>\r\n            <Row className='mb-1'>\r\n                <Col><OptionTitle>{props.commandName}</OptionTitle></Col>\r\n            </Row>\r\n            {optionRows}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport const CommandUsageStyles = {\r\n    CommandUsage\r\n}","import { styled } from \"../../global/style/themes\";\r\n\r\nconst Block = styled.pre`\r\n    color: white;\r\n    background-color: #0f001c;\r\n    width: 60%;\r\n    margin: auto;\r\n    text-align: left;\r\n    padding-top: 20px;\r\n    padding-bottom: 20px;\r\n    padding-left: 5%;\r\n    margin-bottom: 50px;\r\n    margin-top: 50px;\r\n    overflow-y: hidden;\r\n  `\r\n\r\nexport const CodeBlockStyles = {\r\n    Block\r\n}","import { styled } from \"../../global/style/themes\";\r\n\r\nconst Tip = styled.div`\r\n  color: white;\r\n  margin-top: 50px !important;\r\n  margin-bottom: 50px;\r\n  width: auto;\r\n  min-width: 100px;\r\n  max-width: 700px;\r\n  margin: auto;\r\n  `\r\n\r\nexport const CodeTipStyles = {\r\n    Tip\r\n}","import { Toast } from 'react-bootstrap';\r\nimport { CodeTipStyles } from './code-tip.styles';\r\n\r\nexport const CodeTip = (props: { children: JSX.Element[] }) => {\r\n    return (\r\n        <CodeTipStyles.Tip>\r\n            <style type=\"text/css\">\r\n            {`\r\n                .toast-header {\r\n                    background-color: #7a0029;\r\n                    color: white;\r\n                    border-top-left-radius: 25px;\r\n                    border-top-right-radius: 25px;\r\n                }\r\n\r\n                .toast-body {\r\n                    text-align: left;\r\n                }\r\n\r\n                .toast {\r\n                    width: 50%;\r\n                    margin: auto;\r\n                    background-color: white;\r\n                    color: #7a0029;\r\n                    border-radius: 30px;\r\n                }\r\n            `}\r\n            </style>\r\n            <Toast>\r\n                <Toast.Header closeButton={false}>\r\n                    <img src=\"holder.js/20x20?text=%20\" className=\"rounded me-2\" alt=\"\" />\r\n                    <strong>Emily tip</strong>\r\n                </Toast.Header>\r\n                <Toast.Body>{props.children}</Toast.Body>\r\n            </Toast>\r\n        </CodeTipStyles.Tip>\r\n    )\r\n}","import { CodeBlockStyles } from \"../code-block/code-block.styles\"\r\nimport { CodeTip } from \"../code-tip/code-tip\"\r\nimport { HR2 } from \"../line-break/line-break\"\r\nimport { CommandDocumentationStyles } from \"./command-documentation.styles\"\r\nimport { v4 as uuidv4 } from \"uuid\"\r\n\r\nexport type DocSectionType = 'title' | 'body' | 'code' | 'codeblock' | 'terminal' | 'hline' | 'break' | 'tip' | 'bold' | 'italic' | 'link' | 'bulletpoint' | 'bulletpointblock'\r\n\r\nexport type DocSection = {\r\n  type: DocSectionType,\r\n  content: (string | DocSection)[]\r\n}\r\n\r\nexport const renderSections = (type: DocSectionType | undefined, content: (string | DocSection)[]): JSX.Element[] => {\r\n  const rendered: JSX.Element[] = []\r\n  if (!isList(content)) {\r\n    console.log(`Content of type ${type} is not a list. Expected (string | DocSection)[] but got ${content}`)\r\n    return []\r\n  }\r\n\r\n  for (const section of content) {\r\n    if (isString(section)) {\r\n      const renderedElement = <span>{renderString(section as string)}</span>\r\n      rendered.push(renderedElement)\r\n      continue\r\n    }\r\n\r\n    const docSection = section as DocSection\r\n    \r\n    if (docSection.type === 'link') {\r\n      const renderedElement = renderLink(docSection.content)\r\n      rendered.push(renderedElement)\r\n    }\r\n    else {\r\n      const subElements: JSX.Element[] = renderSections(docSection.type, docSection.content)\r\n      const renderedElement = renderSection(docSection.type, subElements)\r\n      rendered.push(renderedElement)\r\n    }\r\n  }\r\n  return rendered\r\n}\r\n\r\nconst renderString = (content: string): JSX.Element => {\r\n  const result = []\r\n  const wordList = content.split(' ')\r\n  let latest: string | undefined = undefined\r\n  for (const word of wordList) {\r\n    if (word === 'emily' && latest === '$') result.push(<CommandDocumentationStyles.EmilyCommand>{word} </CommandDocumentationStyles.EmilyCommand>)\r\n    else if (word === 'Emily:') result.push(<CommandDocumentationStyles.EmilyOutput>{word} </CommandDocumentationStyles.EmilyOutput>)\r\n    else result.push(word + ' ')\r\n    latest = word\r\n  }\r\n  return <span key={uuidv4()}>{result}</span>\r\n}\r\n\r\nconst renderLink = (content: (string | DocSection)[]): JSX.Element => {\r\n  if (content.length === 1 && isString(content[0])) {\r\n    const href = content[0] as string\r\n    return <a href={href} key={uuidv4()} target=\"_blank\" rel=\"noreferrer\">link</a>\r\n  }\r\n  return <span key={uuidv4()}></span>\r\n}\r\n\r\nconst renderSection = (type: DocSectionType | undefined, subElements: JSX.Element[]): JSX.Element => {\r\n    if (type === 'title') return <CommandDocumentationStyles.ExampleTitle key={uuidv4()}>{subElements}</CommandDocumentationStyles.ExampleTitle>\r\n    if (type === 'body') return <CommandDocumentationStyles.ExampleContent key={uuidv4()}>{subElements}</CommandDocumentationStyles.ExampleContent>\r\n    if (type === 'bold') return <CommandDocumentationStyles.ExampleBold key={uuidv4()}>{subElements}</CommandDocumentationStyles.ExampleBold>\r\n    if (type === 'italic') return <CommandDocumentationStyles.ExampleItalic key={uuidv4()}>{subElements}</CommandDocumentationStyles.ExampleItalic>\r\n    if (type === 'break') return <p key={uuidv4()} /> // react wrappes br in p for some reason, creating bigger space\r\n    if (type === 'hline') return <HR2 key={uuidv4()} />\r\n    if (type === 'codeblock') return <CodeBlockStyles.Block key={uuidv4()}>{subElements}</CodeBlockStyles.Block>\r\n    if (type === 'code') return <CommandDocumentationStyles.ExampleCodeLine key={uuidv4()}>{subElements}</CommandDocumentationStyles.ExampleCodeLine>\r\n    if (type === 'tip') return <CodeTip key={uuidv4()}>{subElements}</CodeTip>\r\n    if (type === 'bulletpoint') return <CommandDocumentationStyles.ExampleBulletPoint key={uuidv4()}>• {subElements}</CommandDocumentationStyles.ExampleBulletPoint>\r\n    if (type === 'bulletpointblock') return <CommandDocumentationStyles.ExampleBulletPointBlock key={uuidv4()}>{subElements}</CommandDocumentationStyles.ExampleBulletPointBlock>\r\n    if (type === 'terminal') return <div key={uuidv4()}>{subElements}</div>\r\n  \r\n    console.log(`Unrecognized section type: ${type}`)\r\n    return <span key={uuidv4()}></span>\r\n  }\r\n\r\n  const isString = (v: any): boolean => {\r\n    return (typeof v === 'string' || v instanceof String)\r\n  }\r\n  \r\n  const isList = (v: any): boolean => {\r\n    return Array.isArray(v)\r\n  }","import { ArgumentDefinition, CommandDefinition } from \"cilly\";\r\nimport React from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useVersion } from \"../../hooks/http.hooks\";\r\nimport { CommandDocumentationType } from \"../../models/commandDocumentationType\";\r\nimport { SiteContextProps, useSite } from \"../../state/site/site-state.provider\";\r\nimport { CodeViewerStyles } from \"../code-viewer/code-viewer.styles\";\r\nimport { CommandListStyles } from \"../command-list/command-list.styles\";\r\nimport { CommandUsageStyles } from \"../command-usage/command-usage.styles\";\r\nimport { ContentContainerStyles } from \"../content-container/content-container.styles\";\r\nimport { HR1, HR2 } from \"../line-break/line-break\";\r\nimport { CommandDocumentationStyles } from \"./command-documentation.styles\";\r\nimport { CodeTip } from \"../code-tip/code-tip\";\r\nimport { CodeBlockStyles } from \"../code-block/code-block.styles\";\r\nimport { DocSection, DocSectionType, renderSections } from \"./documentation-renderer\";\r\n\r\nconst required = (str: string) => `<${str}>`\r\nconst optional = (str: string) => `[${str}]`\r\n\r\nexport const CommandDocumentation = (props: {\r\n  version: string,\r\n  command: string,\r\n  childCommand: string | undefined\r\n}) => {\r\n\r\n  const site: SiteContextProps = useSite()\r\n  const version: string | undefined = site.state.version\r\n  const hash: string | undefined = site.state.hash\r\n\r\n  const { data, error } = useVersion(version, hash ?? 'none')\r\n\r\n  if (error) return renderErrorContent(site)\r\n  if (!data) return renderEmptyContent(site)\r\n\r\n  const emilyCommand = data //populateDataWithDummyExtras(data) // TODO: REMOVE    \r\n  const selectedCommand: CommandDefinition = findSelectedCommand(props.command, emilyCommand)\r\n  const selectedChildCommand: CommandDefinition | undefined = findSelectedChildCommand(props.childCommand, selectedCommand)\r\n  const commandToRender: CommandDefinition = selectedChildCommand ?? selectedCommand\r\n\r\n  return (\r\n    <CommandDocumentationStyles.Container>\r\n      <CommandDocumentationStyles.Name>{getCommandName(selectedCommand, selectedChildCommand, '$')}</CommandDocumentationStyles.Name>\r\n\r\n      <ContentContainerStyles.Container>\r\n        <CodeViewerStyles.CodeViewer>\r\n          {getTerminalSections(commandToRender)}\r\n        </CodeViewerStyles.CodeViewer>\r\n      </ContentContainerStyles.Container>\r\n\r\n      <CommandDocumentationStyles.Description>{getCommandDescription(commandToRender)}</CommandDocumentationStyles.Description>\r\n      <CommandUsageStyles.CommandUsage commandName={getCommandName(selectedCommand, selectedChildCommand)} opts={commandToRender.opts}></CommandUsageStyles.CommandUsage>\r\n      <CommandListStyles.CommandList selectedCommand={selectedCommand} selectedChildCommand={selectedChildCommand} emilyCommand={data}></CommandListStyles.CommandList>\r\n\r\n      <CommandDocumentationStyles.Examples>\r\n        {getExampleSections(selectedCommand, selectedChildCommand)}\r\n      </CommandDocumentationStyles.Examples>\r\n\r\n    </CommandDocumentationStyles.Container>\r\n  )\r\n}\r\n\r\nconst renderEmptyContent = (site: SiteContextProps) => {\r\n  return (\r\n    <CommandDocumentationStyles.Container>\r\n      <HR2 />\r\n      <CommandDocumentationStyles.NoVersionTitle>\r\n        Oops, it seems like there is no content for version {site.state.version}. Try again in a few minutes or choose a different version.\r\n      </CommandDocumentationStyles.NoVersionTitle>\r\n    </CommandDocumentationStyles.Container>\r\n  )\r\n}\r\n\r\nconst renderErrorContent = (site: SiteContextProps) => {\r\n  return (\r\n    <CommandDocumentationStyles.Container>\r\n      <HR2 />\r\n      <CommandDocumentationStyles.NoVersionTitle>\r\n        Oops, it seems like there version {site.state.version} coun't be fetched due to a network issue. Try again in a few moments.\r\n      </CommandDocumentationStyles.NoVersionTitle>\r\n    </CommandDocumentationStyles.Container>\r\n  )\r\n}\r\n\r\nconst formatArgument = (arg: ArgumentDefinition): string => {\r\n  let value: string = arg.name\r\n  value = arg.variadic ? `...${value}` : value\r\n  value = arg.required ? required(value) : optional(value)\r\n  return value\r\n}\r\n\r\nconst formatArguments = (args: ArgumentDefinition[]): string => {\r\n  const values: string[] = []\r\n  for (const arg of args) {\r\n    values.push(formatArgument(arg))\r\n  }\r\n  return values.join(' ')\r\n}\r\n\r\nconst getCommandName = (command: CommandDefinition, childCommand: CommandDefinition | undefined, withTerminalChar: string = ''): string => {\r\n  if (childCommand) {\r\n    const childArgs: string = formatArguments(childCommand.args)\r\n    const args: string = formatArguments(command.args)\r\n    const childOpts: string = childCommand.opts.length > 0 ? '[... options]' : ''\r\n    const opts: string = command.opts.length > 0 ? '[... options]' : ''\r\n    return `${withTerminalChar} emily ${command.name} ${args} ${opts} ${childCommand.name} ${childArgs} ${childOpts}`\r\n  }\r\n\r\n  const args: string = formatArguments(command.args)\r\n  const opts: string = command.opts.length > 0 ? '[... options]' : ''\r\n  return `${withTerminalChar} emily ${command.name} ${args} ${opts}`\r\n}\r\n\r\nconst getCommandDescription = (command: CommandDefinition): JSX.Element => {\r\n  const descriptionItems = []\r\n  const description = command.description?.split('\\n')\r\n  if (!description) return <div></div>\r\n  if (description.length === 1) return <div>{description}</div>\r\n\r\n  let idx = 0\r\n  for (const descriptionLine of description) {\r\n    descriptionItems.push(<div key={idx}>{descriptionLine}</div>)\r\n    idx++\r\n  }\r\n  return (\r\n    <div>\r\n      {descriptionItems}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst getTerminalSections = (command: CommandDefinition): JSX.Element[] => {\r\n  let terminalContent: JSX.Element[] = []\r\n  if (!command.extra) return []\r\n  for (const documentationSection of command.extra[0]) {\r\n    if (documentationSection.type === 'terminal') {\r\n      const content: JSX.Element[] = renderSections(documentationSection.type, documentationSection.content)\r\n      terminalContent.push(...content)\r\n    }\r\n  }\r\n  return terminalContent\r\n}\r\n\r\nconst getExampleSections = (selectedCommand: CommandDefinition, selectedChildCommand: CommandDefinition | undefined): React.ReactNode => {\r\n  const renderingCommand: CommandDefinition = selectedChildCommand ? selectedChildCommand : selectedCommand\r\n  if (!renderingCommand.extra) return []\r\n\r\n  const filter: DocSectionType[] = ['terminal']\r\n  const sectionsToRender: (string | DocSection)[] = []\r\n  for (const section of renderingCommand.extra[0]) {\r\n    if (section.type === undefined) continue\r\n    if (filter.includes(section.type) === false) sectionsToRender.push(section)\r\n  }\r\n\r\n  const rendered: JSX.Element[] = renderSections(undefined, sectionsToRender)\r\n  return rendered\r\n}\r\n\r\nexport const findSelectedCommand = (commandStr: string, emilyDefinition: CommandDefinition): CommandDefinition => {\r\n  for (const CommandDefinitionWithDocumentation of emilyDefinition.subCommands) {\r\n    if (CommandDefinitionWithDocumentation.name === commandStr) {\r\n      return CommandDefinitionWithDocumentation\r\n    }\r\n  }\r\n  showError(`Could not find documentation for command ${commandStr}`)\r\n  return emilyDefinition.subCommands[0]\r\n}\r\n\r\nexport const findSelectedChildCommand = (commandStr: string | undefined, selectedCommand: CommandDefinition): CommandDefinition | undefined => {\r\n  if (commandStr === undefined) return undefined\r\n  for (const CommandDefinitionWithDocumentation of selectedCommand.subCommands) {\r\n    if (CommandDefinitionWithDocumentation.name === commandStr) {\r\n      return CommandDefinitionWithDocumentation\r\n    }\r\n  }\r\n  return undefined\r\n}\r\n\r\nexport const processAndShowError = (error: any) => {\r\n  let msg = ''\r\n  try { msg = error.errors.join('\\n') }\r\n  catch { msg = 'Something went wrong.' }\r\n  return showError(msg)\r\n}\r\n\r\nexport const showError = (msg: string) => {\r\n  toast(msg, {\r\n    toastId: msg,\r\n    position: \"top-right\",\r\n    autoClose: 5000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  });\r\n  return <></>\r\n}","import { styled } from \"../../global/style/themes\";\r\n\r\nconst Footer = styled.footer`\r\n  color: white;\r\n  position: absolute;\r\n  bottom: 0;\r\n  left:0;\r\n  right:0;\r\n  margin-left:auto;\r\n  margin-right:auto;\r\n  text-align: center;\r\n  `\r\n\r\nexport const FooterStyles = {\r\n  Footer\r\n}","import { FooterStyles } from \"./footer.styles\"\r\nimport { HR1 } from '../../components/line-break/line-break';\r\n\r\nexport const Footer = () => {\r\n  return (\r\n  <FooterStyles.Footer>\r\n    <HR1 />\r\n    <p>Emily CLI Documentation</p>\r\n  </FooterStyles.Footer>\r\n  )\r\n}","import styled from \"styled-components\"\r\n\r\nconst Description = styled.div`\r\n  text-align: center;\r\n  font-size: 1.5em;\r\n  padding-top: 50px;\r\n  padding-bottom: 50px;\r\n  width: 90%;\r\n  padding-left: 5%;\r\n  color: white;\r\n`\r\n\r\nexport const DescriptionStyles = {\r\n    Description\r\n} ","import { styled } from \"../../global/style/themes\";\r\n\r\nconst Download = styled.section`\r\n  text-align: center;\r\n  font-size: 6em;\r\n`\r\n\r\nexport const DownloadStyles = {\r\n    Download\r\n}","import { Button } from \"react-bootstrap\"\r\nimport { SiteContextProps, useSite } from \"../../state/site/site-state.provider\"\r\nimport { DownloadStyles } from \"./download.styles\"\r\n\r\nconst getVersionNumber = (version: string): string => {\r\n  const result = version.split('-')\r\n  return result.length === 1 ? result[0] : result[1]\r\n}\r\n\r\nexport const DownloadButton = () => { \r\n\r\n  const site: SiteContextProps = useSite()\r\n  const version: string = getVersionNumber(site.state.versionDownload)\r\n  const url = `https://github.com/amboltio/emily-cli/releases/tag/${version}`\r\n    \r\n  return (\r\n    <DownloadStyles.Download>\r\n      <style type=\"text/css\">\r\n        {`\r\n          .btn-primary {\r\n            background-color: white;\r\n            border-radius: 30px;\r\n            color: #7a0029;\r\n            border: 1px solid #7a0029;\r\n          }\r\n\r\n          .btn-primary:hover {\r\n            background-color: #7a0029;\r\n            color: white;\r\n            outline: none;\r\n            border: 1px solid white;\r\n          }\r\n\r\n          .btn-primary:active, .btn-primary:focus {\r\n            background-color: #7a0029;\r\n            color: white;\r\n            outline: none !important;\r\n            box-shadow: none !important;\r\n            border: 1px solid white;\r\n          }\r\n        `}\r\n      </style>\r\n      <Button href={url} target=\"_blank\" variant=\"primary\" size=\"lg\"><strong>Download Emily {version}</strong></Button>\r\n    </DownloadStyles.Download>\r\n    )\r\n  }","import { styled } from \"./global/style/themes\";\r\n\r\nconst Container = styled.section`\r\n  padding-top: 40px;\r\n  background-image: linear-gradient(180deg, #7a0029, #010101);\r\n  position: relative;\r\n  min-height: 1200px;\r\n`\r\n\r\nexport const AppStyles = {\r\n    Container\r\n}","import React, { version } from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\"\r\nimport { useVersions } from \"../../hooks/http.hooks\";\r\nimport { SiteContextProps, useSite } from \"../../state/site/site-state.provider\"\r\nimport bcrypt from 'bcryptjs'\r\n\r\nlet branchState: string = ''\r\nlet password: string = ''\r\n\r\nexport const BranchInput = () => {\r\n    const site: SiteContextProps = useSite()\r\n    const { data, error } = useVersions()\r\n\r\n    if (!data || error) return renderDisabledInput()\r\n\r\n    return (\r\n        <Form>\r\n            <style type=\"text/css\">\r\n                {`\r\n                    #formBranch {\r\n                        width: 50%\r\n                    }\r\n                    .form-input{\r\n                        border-radius: 0;\r\n                    }\r\n                `}\r\n            </style>\r\n            <Form.Group className=\"mb-3\" controlId=\"formBranch\">\r\n                <Form.Control className=\"form-input\" size=\"lg\" onChange={e => branchState = e.target.value} type=\"text\" placeholder=\"Enter a branch\" />\r\n                <Form.Control className=\"form-input mt-2\" size=\"sm\" onChange={e => password = e.target.value} type=\"password\" placeholder=\"Enter password\" />\r\n                <Button className=\"mt-2\" size=\"sm\" variant=\"secondary\" onClick={() => submitBranchInput(site)}>\r\n                    Submit\r\n                </Button>\r\n            </Form.Group>\r\n        </Form>\r\n    )\r\n}\r\n\r\nconst submitBranchInput = (site: SiteContextProps) => {\r\n    var hash = bcrypt.hashSync(password, '$2a$10$1IQzeLhf1w3fcAfbXJh.JO');\r\n    site.changeVersionPassword(branchState, hash)\r\n}\r\n\r\nconst renderDisabledInput = () => {\r\n    return (\r\n        <Form>\r\n            <style type=\"text/css\">\r\n                {`\r\n                    #formBranch {\r\n                        width: 50%\r\n                    }\r\n                    .form-input{\r\n                        border-radius: 0;\r\n                    }\r\n                `}\r\n            </style>\r\n            <Form.Group className=\"mb-3\" controlId=\"formBranch\">\r\n                <Form.Control disabled className=\"form-input\" size=\"lg\" onChange={e => branchState = e.target.value} type=\"text\" placeholder=\"Enter a branch\" />\r\n                <Form.Control className=\"form-input mt-2\" size=\"sm\" onChange={e => password = e.target.value} type=\"password\" placeholder=\"Enter password\" />\r\n                <Button disabled className=\"mt-1\" size=\"sm\" variant=\"secondary\">\r\n                    Submit\r\n                </Button>\r\n            </Form.Group>\r\n        </Form>\r\n    )\r\n}","import { styled } from \"../../global/style/themes\";\r\n\r\nconst ReleaseSelector = styled.section`\r\n  text-align: center;\r\n  font-size: 6em;\r\n`\r\n\r\nexport const ReleaseSelectorStyles = {\r\n    ReleaseSelector\r\n}","import { Dropdown } from \"react-bootstrap\"\r\nimport { toast } from \"react-toastify\"\r\nimport { useVersions } from \"../../hooks/http.hooks\"\r\nimport { SiteContextProps, useSite } from \"../../state/site/site-state.provider\"\r\nimport { ReleaseSelectorStyles } from \"./release-selector.styles\"\r\n\r\nexport const ReleaseSelector = () => {\r\n  const site: SiteContextProps = useSite()\r\n  const { data, error } = useVersions()\r\n  // if (error) return processAndShowError(error)\r\n\r\n  if (!data) return renderEmptyDropdown()\r\n\r\n  const dropdownItems: JSX.Element[] = getDropdownItems(data, site)\r\n  return (\r\n    <ReleaseSelectorStyles.ReleaseSelector>\r\n      <style type=\"text/css\">\r\n        {`\r\n          .btn-secondary {\r\n            background-color: #7a0029;\r\n            border-radius: 0px;\r\n            color: white;\r\n            border: 1px solid white;\r\n          }\r\n\r\n          .btn-secondary:hover {\r\n            background-color: white;\r\n            color: #7a0029;\r\n            border: 1px solid #7a0029;\r\n          }\r\n\r\n          .btn-secondary:active, .btn-secondary:focus {\r\n            background-color: white !important;\r\n            color: #7a0029 !important;\r\n            box-shadow: none !important;\r\n            border: 1px solid #7a0029 !important;\r\n          }\r\n\r\n          #dropdown {\r\n            font-size: 0px;\r\n          }\r\n        `}\r\n      </style>\r\n      <Dropdown id=\"dropdown\">\r\n        <Dropdown.Toggle variant=\"secondary\" size=\"lg\">\r\n          {site.state.version}\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          {dropdownItems}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    </ReleaseSelectorStyles.ReleaseSelector>\r\n  )\r\n}\r\n\r\nconst renderEmptyDropdown = () => {\r\n  return (\r\n    <ReleaseSelectorStyles.ReleaseSelector>\r\n        <style type=\"text/css\">\r\n        {`\r\n          .no-versions-message {\r\n            float:right;\r\n            color: white;\r\n            font-size: 20px !important;\r\n            text-align: right;\r\n          }\r\n        `}\r\n      </style>\r\n      <p className=\"no-versions-message\">We apologize, there are no Emily versions available at the moment, please check in a few minutes.</p>\r\n    </ReleaseSelectorStyles.ReleaseSelector>\r\n  )\r\n}\r\n\r\nconst getDropdownItems = (versions: string[], site: SiteContextProps): JSX.Element[] => {\r\n  const items = []\r\n  for (const version of versions) {\r\n    const item: JSX.Element = <Dropdown.Item key={version} onClick={() => clickHandler(version, site)}>{version}</Dropdown.Item>\r\n    items.push(item)\r\n  }\r\n  return items.reverse()\r\n}\r\n\r\nconst clickHandler = (version: string, site: SiteContextProps): void => {\r\n  site.changeVersionDownload(version)\r\n}\r\n\r\nconst processAndShowError = (error: any) => {\r\n  let msg = ''\r\n  try { msg = error.errors.join('\\n') }\r\n  catch { msg = 'Something went wrong.' }\r\n  return showError(msg)\r\n}\r\n\r\nconst showError = (msg: string) => {\r\n  toast(msg, {\r\n    toastId: msg,\r\n    position: \"top-right\",\r\n    autoClose: 5000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  });\r\n  return <></>\r\n}","import { Col, Container, Row } from \"react-bootstrap\"\r\nimport { SiteContextProps, useSite } from \"../../state/site/site-state.provider\"\r\nimport { BranchInput } from \"./branch-input\"\r\nimport { ReleaseSelector } from \"./release-selector\"\r\n\r\nexport const GitObjectSelectionDev = () => {\r\n    const site: SiteContextProps = useSite()\r\n\r\n    return (\r\n        <Container>\r\n            <style type=\"text/css\">\r\n                {`\r\n                    .selection-title, .selection-desc {\r\n                        color: white;\r\n                        text-align: center;\r\n                    }\r\n                    \r\n                    #release-box {\r\n                        display: flex;\r\n                        justify-content: right;\r\n                        align-items: end;\r\n                    }\r\n\r\n                `}\r\n            </style>\r\n            <Row className=\"mb-5 mt-5\">\r\n                <h1 className=\"selection-title\">{site.state.version}</h1>\r\n                <p className=\"selection-desc\">To find documentation for a specific version of Emily CLI, either select a <strong>release</strong> or enter a <strong>branch</strong>.</p>\r\n            </Row>\r\n            <Row>\r\n                <Col xs=\"6\">\r\n                    <div id=\"release-box\">\r\n                        <ReleaseSelector />\r\n                    </div>\r\n                </Col>\r\n                <Col xs=\"6\">\r\n                    <BranchInput />\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport const GitObjectSelection = () => {\r\n    return (\r\n        <div>\r\n            <style type=\"text/css\">\r\n                {`\r\n                    .selection-title, .selection-desc {\r\n                        color: white;\r\n                        text-align: center;\r\n                    }\r\n                `}\r\n            </style>\r\n            <ReleaseSelector />\r\n        </div>\r\n    )\r\n}","import { ToastContainer } from 'react-toastify';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { GlobalStyle } from './global/style';\r\nimport { AppThemes, DarkTheme, LightTheme } from './global/style/themes';\r\nimport { useSite } from './state/site/site-state.provider';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { Header } from './components/header/header';\r\nimport { ContentContainerStyles } from './components/content-container/content-container.styles';\r\nimport { CommandDocumentation } from './components/command-documentation/command-documentation';\r\nimport { ReleaseSelector } from './components/git-object-selection/release-selector';\r\nimport { FooterStyles } from './components/footer/footer.styles';\r\nimport { Footer } from './components/footer/footer';\r\nimport { DescriptionStyles } from './components/description/description.styles';\r\nimport { DownloadStyles } from './components/download/download.styles';\r\nimport { DownloadButton } from './components/download/download-button';\r\nimport { AppStyles } from './App.styles';\r\nimport { HR1 } from './components/line-break/line-break';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport { BranchInput } from './components/git-object-selection/branch-input';\r\nimport { GitObjectSelectionDev, GitObjectSelection } from './components/git-object-selection/git-object-selection';\r\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nconst App = () => {\r\n\r\n  const site = useSite()\r\n\r\n  return (\r\n    <AppStyles.Container>\r\n      <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover />\r\n      <Header />\r\n\r\n      <DescriptionStyles.Description>\r\n        Emily combines the powers of Python and Docker to build stable and consistent machine learning and datascience python environments. Emily is useful for large cross-team project development as well as for simply running a single jupyter notebook or python script.\r\n      </DescriptionStyles.Description>\r\n\r\n      <DownloadButton />\r\n      <HR1 />\r\n\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/dev\">\r\n            <GitObjectSelectionDev />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <GitObjectSelection />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n\r\n      <ContentContainerStyles.Container>\r\n        <CommandDocumentation version={'branch/development'} command={site.state.command ?? 'open'} childCommand={site.state.childCommand} />\r\n      </ContentContainerStyles.Container>\r\n\r\n      <Footer />\r\n    </AppStyles.Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport StateProvider from './state/state.provider';\r\nimport './static/fonts/Aktiv_Grotesk/stylesheet.css';\r\nimport './static/fonts/Ubuntu_Mono/stylesheet.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StateProvider>\r\n      <App />\r\n    </StateProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}